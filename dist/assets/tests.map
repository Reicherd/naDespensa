{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","super-rentals/tests/acceptance/list-rentals-test.js","super-rentals/tests/helpers/ember-power-select.js","super-rentals/tests/helpers/ember-simple-auth.js","super-rentals/tests/helpers/setup-mirage-for-unit-test.js","super-rentals/tests/integration/components/butterworth-test.js","super-rentals/tests/integration/components/left-side-bar-test.js","super-rentals/tests/integration/components/list-filter-test.js","super-rentals/tests/integration/components/location-map-test.js","super-rentals/tests/integration/components/rental-listing-test.js","super-rentals/tests/integration/components/rental-property-type-test.js","super-rentals/tests/lint/app.lint-test.js","super-rentals/tests/lint/templates.template.lint-test.js","super-rentals/tests/lint/tests.lint-test.js","super-rentals/tests/test-helper.js","super-rentals/tests/unit/adapters/application-test.js","super-rentals/tests/unit/controllers/application-test.js","super-rentals/tests/unit/controllers/login-test.js","super-rentals/tests/unit/controllers/rentals/index-test.js","super-rentals/tests/unit/controllers/token-test.js","super-rentals/tests/unit/models/rental-test.js","super-rentals/tests/unit/routes/about-test.js","super-rentals/tests/unit/routes/application-test.js","super-rentals/tests/unit/routes/butterworth-test.js","super-rentals/tests/unit/routes/contact-test.js","super-rentals/tests/unit/routes/index-test.js","super-rentals/tests/unit/routes/login-test.js","super-rentals/tests/unit/routes/rentals-test.js","super-rentals/tests/unit/routes/rentals/index-test.js","super-rentals/tests/unit/routes/rentals/show-test.js","super-rentals/tests/unit/routes/token-test.js","super-rentals/tests/unit/services/map-element-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"super-rentals/tests/acceptance/list-rentals-test\", [\"qunit\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _setupMirage, _testHelpers) {\n  \"use strict\";\n\n  let StubMapsService = Ember.Service.extend({\n    getMapElement() {\n      return Ember.RSVP.resolve(document.createElement('div'));\n    }\n\n  });\n  (0, _qunit.module)('Acceptance | list rentals', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    hooks.beforeEach(function () {\n      this.owner.register('service:map-element', StubMapsService);\n    });\n    (0, _qunit.test)('should redirect to rentals route', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      assert.equal((0, _testHelpers.currentURL)(), '/rentals', 'should redirect automatically');\n    });\n    (0, _qunit.test)('should link to information about the company', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      await (0, _testHelpers.click)(\".menu-about\");\n      assert.equal((0, _testHelpers.currentURL)(), '/about', 'should navigate to about');\n    });\n    (0, _qunit.test)('should link to contact information', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      await (0, _testHelpers.click)(\".menu-contact\");\n      assert.equal((0, _testHelpers.currentURL)(), '/contact', 'should navigate to contact');\n    });\n    (0, _qunit.test)('should list available rentals', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      assert.equal(this.element.querySelectorAll('.results .listing').length, 3, 'should display 3 listings');\n    });\n    (0, _qunit.test)('should filter the list of rentals by city', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      await (0, _testHelpers.fillIn)('.list-filter input', 'seattle');\n      await (0, _testHelpers.triggerKeyEvent)('.list-filter input', 'keyup', 69);\n      assert.ok(this.element.querySelectorAll('.results .listing').length, 1, 'should display 1 listing');\n      assert.ok(this.element.querySelector('.listing .location').textContent.includes('Seattle'), 'should contain 1 listing with location Seattle');\n    });\n    (0, _qunit.test)('should show details for a specific rental', async function (assert) {\n      await (0, _testHelpers.visit)('/rentals');\n      await (0, _testHelpers.click)(\".grand-old-mansion\");\n      assert.equal((0, _testHelpers.currentURL)(), '/rentals/grand-old-mansion', \"should navigate to show route\");\n      assert.ok(this.element.querySelector('.show-listing h2').textContent.includes(\"Grand Old Mansion\"), 'should list rental title');\n      assert.ok(this.element.querySelector('.show-listing .description'), 'should list a description of the property');\n    });\n  });\n});","define(\"super-rentals/tests/helpers/ember-power-select\", [\"exports\", \"ember-power-select/test-support/helpers\"], function (_exports, _helpers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = deprecatedRegisterHelpers;\n  _exports.selectChoose = _exports.touchTrigger = _exports.nativeTouch = _exports.clickTrigger = _exports.typeInSearch = _exports.triggerKeydown = _exports.nativeMouseUp = _exports.nativeMouseDown = _exports.findContains = void 0;\n\n  function deprecateHelper(fn, name) {\n    return function (...args) {\n      (true && !(false) && Ember.deprecate(\"DEPRECATED `import { \".concat(name, \" } from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import { \").concat(name, \" } from 'ember-power-select/test-support/helpers';`\"), false, {\n        until: '1.11.0',\n        id: \"ember-power-select-test-support-\".concat(name)\n      }));\n      return fn(...args);\n    };\n  }\n\n  let findContains = deprecateHelper(_helpers.findContains, 'findContains');\n  _exports.findContains = findContains;\n  let nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');\n  _exports.nativeMouseDown = nativeMouseDown;\n  let nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');\n  _exports.nativeMouseUp = nativeMouseUp;\n  let triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');\n  _exports.triggerKeydown = triggerKeydown;\n  let typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');\n  _exports.typeInSearch = typeInSearch;\n  let clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');\n  _exports.clickTrigger = clickTrigger;\n  let nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');\n  _exports.nativeTouch = nativeTouch;\n  let touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');\n  _exports.touchTrigger = touchTrigger;\n  let selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');\n  _exports.selectChoose = selectChoose;\n\n  function deprecatedRegisterHelpers() {\n    (true && !(false) && Ember.deprecate(\"DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`\", false, {\n      until: '1.11.0',\n      id: 'ember-power-select-test-support-register-helpers'\n    }));\n    return (0, _helpers.default)();\n  }\n});","define(\"super-rentals/tests/helpers/ember-simple-auth\", [\"exports\", \"ember-simple-auth/authenticators/test\"], function (_exports, _test) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.authenticateSession = authenticateSession;\n  _exports.currentSession = currentSession;\n  _exports.invalidateSession = invalidateSession;\n  const TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    const authenticator = container.lookup(TEST_CONTAINER_KEY);\n\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _test.default);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    const {\n      __container__: container\n    } = app;\n    const session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return app.testHelpers.wait();\n  }\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  function invalidateSession(app) {\n    const session = app.__container__.lookup('service:session');\n\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n\n    return app.testHelpers.wait();\n  }\n});","define(\"super-rentals/tests/helpers/setup-mirage-for-unit-test\", [\"exports\", \"super-rentals/initializers/ember-cli-mirage\"], function (_exports, _emberCliMirage) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = startMirage;\n\n  function startMirage(container) {\n    _emberCliMirage.default.initialize(container);\n  }\n});","define(\"super-rentals/tests/integration/components/butterworth-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | butterworth', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"rVdKdLbo\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"butterworth\\\",[],[[],[]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"kKbfcoy2\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"butterworth\\\",[],[[],[]],{\\\"statements\\\":[[0,\\\"\\\\n        template block text\\\\n      \\\"]],\\\"parameters\\\":[]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"super-rentals/tests/integration/components/left-side-bar-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | left-side-bar', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"kUSGIkGP\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"left-side-bar\\\",[],[[],[]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"okbKHn5x\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"left-side-bar\\\",[],[[],[]],{\\\"statements\\\":[[0,\\\"\\\\n        template block text\\\\n      \\\"]],\\\"parameters\\\":[]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"super-rentals/tests/integration/components/list-filter-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | list-filter', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.actions = {};\n\n      this.send = (actionName, ...args) => this.actions[actionName].apply(this, args);\n    });\n    const ITEMS = [{\n      city: 'San Francisco'\n    }, {\n      city: 'Portland'\n    }, {\n      city: 'Seattle'\n    }];\n    const FILTERED_ITEMS = [{\n      city: 'San Francisco'\n    }];\n    (0, _qunit.test)('should initially load all listings', async function (assert) {\n      assert.expect(2);\n      this.set('filterByCity', () => Ember.RSVP.resolve({\n        results: ITEMS\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"P9miy1YR\",\n        \"block\": \"{\\\"symbols\\\":[\\\"results\\\",\\\"item\\\"],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"list-filter\\\",[],[[\\\"@filter\\\"],[[28,\\\"action\\\",[[23,0,[]],[24,[\\\"filterByCity\\\"]]],null]]],{\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[7,\\\"ul\\\",true],[8],[0,\\\"\\\\n\\\"],[4,\\\"each\\\",[[23,1,[]]],null,{\\\"statements\\\":[[0,\\\"          \\\"],[7,\\\"li\\\",true],[10,\\\"class\\\",\\\"city\\\"],[8],[0,\\\"\\\\n            \\\"],[1,[23,2,[\\\"city\\\"]],false],[0,\\\"\\\\n          \\\"],[9],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[2]},null],[0,\\\"        \\\"],[9],[0,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.querySelectorAll('.city').length, 3);\n      assert.dom(this.element.querySelector('.city')).hasText('San Francisco');\n    });\n    (0, _qunit.test)('should update with matching listings', async function (assert) {\n      this.set('filterByCity', val => {\n        if (val === '') {\n          return Ember.RSVP.resolve({\n            query: val,\n            results: ITEMS\n          });\n        } else {\n          return Ember.RSVP.resolve({\n            query: val,\n            results: FILTERED_ITEMS\n          });\n        }\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"P9miy1YR\",\n        \"block\": \"{\\\"symbols\\\":[\\\"results\\\",\\\"item\\\"],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"list-filter\\\",[],[[\\\"@filter\\\"],[[28,\\\"action\\\",[[23,0,[]],[24,[\\\"filterByCity\\\"]]],null]]],{\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[7,\\\"ul\\\",true],[8],[0,\\\"\\\\n\\\"],[4,\\\"each\\\",[[23,1,[]]],null,{\\\"statements\\\":[[0,\\\"          \\\"],[7,\\\"li\\\",true],[10,\\\"class\\\",\\\"city\\\"],[8],[0,\\\"\\\\n            \\\"],[1,[23,2,[\\\"city\\\"]],false],[0,\\\"\\\\n          \\\"],[9],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[2]},null],[0,\\\"        \\\"],[9],[0,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.fillIn)(this.element.querySelector('.list-filter input'), 's');\n      await (0, _testHelpers.triggerKeyEvent)(this.element.querySelector('.list-filter input'), \"keyup\", 83);\n      assert.equal(this.element.querySelectorAll('.city').length, 1, 'One result returned');\n      assert.dom(this.element.querySelector('.city')).hasText('San Francisco');\n    });\n  });\n});","define(\"super-rentals/tests/integration/components/location-map-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  let StubMapsService = Ember.Service.extend({\n    getMapElement(location) {\n      this.set('calledWithLocation', location);\n      let element = document.createElement('div');\n      element.className = 'map';\n      return Ember.RSVP.resolve(element);\n    }\n\n  });\n  (0, _qunit.module)('Integration | Component | location map', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.owner.register('service:map-element', StubMapsService);\n      this.mapsService = this.owner.lookup('service:map-element');\n    });\n    (0, _qunit.test)('should append map element to container element', async function (assert) {\n      this.set('myLocation', 'New York');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"G0uM4ptA\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"location-map\\\",[],[[\\\"@location\\\"],[[22,\\\"myLocation\\\"]]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.ok(this.element.querySelector('.map-container > .map'), 'container should have map child');\n      assert.equal(this.get('mapsService.calledWithLocation'), 'New York', 'should call service with New York');\n    });\n  });\n});","define(\"super-rentals/tests/integration/components/rental-listing-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  let StubMapsService = Ember.Service.extend({\n    getMapElement() {\n      return Ember.RSVP.resolve(document.createElement('div'));\n    }\n\n  });\n  (0, _qunit.module)('Integration | Component | rental listing', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.owner.register('service:map-element', StubMapsService);\n      this.rental = {\n        image: 'fake.png',\n        title: 'test-title',\n        owner: 'test-owner',\n        type: 'test-type',\n        city: 'test-city',\n        bedrooms: 3\n      };\n    });\n    (0, _qunit.test)('should display rental details', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"lNRkO1Rt\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"rental-listing\\\",[],[[\\\"@rental\\\"],[[22,\\\"rental\\\"]]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom(this.element.querySelector('.listing h3')).hasText('test-title', 'Title: test-title');\n      assert.dom(this.element.querySelector('.listing .owner')).hasText('Owner: test-owner', 'Owner: test-owner');\n    });\n    (0, _qunit.test)('should toggle wide class on click', async function (assert) {\n      assert.expect(3);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"lNRkO1Rt\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"rental-listing\\\",[],[[\\\"@rental\\\"],[[22,\\\"rental\\\"]]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.notOk(this.element.querySelector('.image.wide'), 'initially rendered small');\n      await (0, _testHelpers.click)('.image');\n      assert.ok(this.element.querySelector('.image.wide'), 'rendered wide after click');\n      await (0, _testHelpers.click)('.image');\n      assert.notOk(this.element.querySelector('.image.wide'), 'rendered small after second click');\n    });\n  });\n});","define(\"super-rentals/tests/integration/components/rental-property-type-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | rental property type', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it renders correctly for a Standalone rental', async function (assert) {\n      this.set('inputValue', 'Estate');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"iIlSP0oL\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"rental-property-type\\\",[[24,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'Standalone');\n    });\n    (0, _qunit.test)('it renders correctly for a Community rental', async function (assert) {\n      this.set('inputValue', 'Apartment');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"iIlSP0oL\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[28,\\\"rental-property-type\\\",[[24,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'Community');\n    });\n  });\n});","define(\"super-rentals/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/application.js should pass ESLint\\n\\n2:8 - \\'DataAdapterMixin\\' is defined but never used. (no-unused-vars)');\n  });\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('authenticators/oauth2.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'authenticators/oauth2.js should pass ESLint\\n\\n4:24 - \\'scope\\' is defined but never used. (no-unused-vars)\\n4:31 - \\'head\\' is defined but never used. (no-unused-vars)\\n5:17 - Use `import { Promise } from \\'rsvp\\';` instead of using Ember.RSVP.Promise (ember/new-module-imports)\\n5:17 - \\'Ember\\' is not defined. (no-undef)');\n  });\n  QUnit.test('authorizers/oauth2.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authorizers/oauth2.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/left-side-bar.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/left-side-bar.js should pass ESLint\\n\\n11:7 - \\'canceled\\' is assigned a value but never used. (no-unused-vars)\\n11:19 - \\'clickMe\\' is not defined. (no-undef)\\n13:9 - Unexpected console statement. (no-console)\\n16:9 - Unexpected console statement. (no-console)');\n  });\n  QUnit.test('components/list-filter.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/list-filter.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/location-map.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/location-map.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/rental-listing.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/rental-listing.js should pass ESLint\\n\\n8:7 - Unexpected console statement. (no-console)\\n9:7 - Unexpected console statement. (no-console)');\n  });\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/login.js should pass ESLint\\n\\n12:9 - Unexpected console statement. (no-console)\\n14:9 - Unexpected console statement. (no-console)');\n  });\n  QUnit.test('controllers/rentals.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/rentals.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/rentals/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/rentals/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/token.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/token.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/rental-property-type.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/rental-property-type.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/rental.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/rental.js should pass ESLint\\n\\n7:3 - Duplicate key \\'title\\'. (no-dupe-keys)');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/about.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/about.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/contact.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/contact.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/rentals.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/rentals.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/rentals/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/rentals/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/rentals/show.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/rentals/show.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/token.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/token.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('services/map-element.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/map-element.js should pass ESLint\\n\\n');\n  });\n});","define(\"super-rentals/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('super-rentals/templates/about.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'super-rentals/templates/about.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('super-rentals/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'super-rentals/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('super-rentals/templates/butterworth.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'super-rentals/templates/butterworth.hbs should pass TemplateLint.\\n\\nsuper-rentals/templates/butterworth.hbs\\n  1:2  error  Ambiguous path \\'butterworth\\' is not allowed. Use \\'@butterworth\\' if it is a named argument or \\'this.butterworth\\' if it is a property on \\'this\\'. If it is a helper or component that has no arguments you must manually add it to the \\'no-implicit-this\\' rule configuration, e.g. \\'no-implicit-this\\': { allow: [\\'butterworth\\'] }.  no-implicit-this\\n');\n  });\n  QUnit.test('super-rentals/templates/components/left-side-bar.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'super-rentals/templates/components/left-side-bar.hbs should pass TemplateLint.\\n\\nsuper-rentals/templates/components/left-side-bar.hbs\\n  12:4  error  Incorrect indentation for `{{#if}}` beginning at L12:C4. Expected `{{#if}}` to be at an indentation of 6 but was found at 4.  block-indentation\\n  12:10  error  Ambiguous path \\'session.isAuthenticated\\' is not allowed. Use \\'@session.isAuthenticated\\' if it is a named argument or \\'this.session.isAuthenticated\\' if it is a property on \\'this\\'. If it is a helper or component that has no arguments you must manually add it to the \\'no-implicit-this\\' rule configuration, e.g. \\'no-implicit-this\\': { allow: [\\'session.isAuthenticated\\'] }.  no-implicit-this\\n  13:9  error  Interaction added to non-interactive element  no-invalid-interactive\\n  51:4  error  Unexpected {{outlet}} usage. Only use {{outlet}} within a route template.  no-outlet-outside-routes\\n  13:18  error  you must use double quotes in templates  quotes\\n  15:17  error  you must use double quotes in templates  quotes\\n');\n  });\n  QUnit.test('super-rentals/templates/components/list-filter.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'super-rentals/templates/components/list-filter.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('super-rentals/templates/components/location-map.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'super-rentals/templates/components/location-map.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('super-rentals/templates/components/rental-listing.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'super-rentals/templates/components/rental-listing.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('super-rentals/templates/contact.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'super-rentals/templates/contact.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('super-rentals/templates/index.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'super-rentals/templates/index.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('super-rentals/templates/login.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'super-rentals/templates/login.hbs should pass TemplateLint.\\n\\nsuper-rentals/templates/login.hbs\\n  3:62  error  Ambiguous path \\'identification\\' is not allowed. Use \\'@identification\\' if it is a named argument or \\'this.identification\\' if it is a property on \\'this\\'. If it is a helper or component that has no arguments you must manually add it to the \\'no-implicit-this\\' rule configuration, e.g. \\'no-implicit-this\\': { allow: [\\'identification\\'] }.  no-implicit-this\\n  5:75  error  Ambiguous path \\'password\\' is not allowed. Use \\'@password\\' if it is a named argument or \\'this.password\\' if it is a property on \\'this\\'. If it is a helper or component that has no arguments you must manually add it to the \\'no-implicit-this\\' rule configuration, e.g. \\'no-implicit-this\\': { allow: [\\'password\\'] }.  no-implicit-this\\n  7:8  error  Ambiguous path \\'errorMessage\\' is not allowed. Use \\'@errorMessage\\' if it is a named argument or \\'this.errorMessage\\' if it is a property on \\'this\\'. If it is a helper or component that has no arguments you must manually add it to the \\'no-implicit-this\\' rule configuration, e.g. \\'no-implicit-this\\': { allow: [\\'errorMessage\\'] }.  no-implicit-this\\n  8:9  error  Ambiguous path \\'errorMessage\\' is not allowed. Use \\'@errorMessage\\' if it is a named argument or \\'this.errorMessage\\' if it is a property on \\'this\\'. If it is a helper or component that has no arguments you must manually add it to the \\'no-implicit-this\\' rule configuration, e.g. \\'no-implicit-this\\': { allow: [\\'errorMessage\\'] }.  no-implicit-this\\n  1:15  error  you must use double quotes in templates  quotes\\n  1:33  error  you must use double quotes in templates  quotes\\n  3:13  error  you must use double quotes in templates  quotes\\n  3:42  error  you must use double quotes in templates  quotes\\n  5:13  error  you must use double quotes in templates  quotes\\n  5:36  error  you must use double quotes in templates  quotes\\n  5:58  error  you must use double quotes in templates  quotes\\n');\n  });\n  QUnit.test('super-rentals/templates/rentals.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'super-rentals/templates/rentals.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('super-rentals/templates/rentals/index.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'super-rentals/templates/rentals/index.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('super-rentals/templates/rentals/show.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'super-rentals/templates/rentals/show.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('super-rentals/templates/token.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'super-rentals/templates/token.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"super-rentals/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('acceptance/list-rentals-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/list-rentals-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/setup-mirage-for-unit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/setup-mirage-for-unit-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/butterworth-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/butterworth-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/left-side-bar-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/left-side-bar-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/list-filter-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/list-filter-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/location-map-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/location-map-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/rental-listing-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/rental-listing-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/rental-property-type-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/rental-property-type-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/login-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/rentals/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/rentals/index-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/token-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/token-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/models/rental-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/rental-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/about-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/about-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/butterworth-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/butterworth-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/contact-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/contact-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/rentals-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/rentals-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/rentals/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/rentals/index-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/rentals/show-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/rentals/show-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/token-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/token-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/services/map-element-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/map-element-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"super-rentals/tests/test-helper\", [\"super-rentals/app\", \"super-rentals/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"super-rentals/tests/unit/adapters/application-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Adapter | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      assert.ok(adapter);\n    });\n  });\n});","define(\"super-rentals/tests/unit/controllers/application-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:application');\n      assert.ok(controller);\n    });\n  });\n});","define(\"super-rentals/tests/unit/controllers/login-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | login', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:login');\n      assert.ok(controller);\n    });\n  });\n});","define(\"super-rentals/tests/unit/controllers/rentals/index-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | rentals/index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:rentals/index');\n      assert.ok(controller);\n    });\n  });\n});","define(\"super-rentals/tests/unit/controllers/token-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | token', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:token');\n      assert.ok(controller);\n    });\n  });\n});","define(\"super-rentals/tests/unit/models/rental-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | rental', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let model = Ember.run(() => this.owner.lookup('service:store').createRecord('rental')); // let store = this.get('store')();\n\n      assert.ok(!!model);\n    });\n  });\n});","define(\"super-rentals/tests/unit/routes/about-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | about', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:about');\n      assert.ok(route);\n    });\n  });\n});","define(\"super-rentals/tests/unit/routes/application-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:application');\n      assert.ok(route);\n    });\n  });\n});","define(\"super-rentals/tests/unit/routes/butterworth-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | butterworth', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:butterworth');\n      assert.ok(route);\n    });\n  });\n});","define(\"super-rentals/tests/unit/routes/contact-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | contact', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:contact');\n      assert.ok(route);\n    });\n  });\n});","define(\"super-rentals/tests/unit/routes/index-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Unit | Route | index\", function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)(\"should transition to rentals route\", function (assert) {\n      let route = this.owner.factoryFor(\"route:index\").create({\n        transitionTo(routeName) {\n          assert.equal(routeName, \"rentals\", \"transition to route name rentals\");\n        }\n\n      });\n      route.beforeModel();\n    });\n  });\n});","define(\"super-rentals/tests/unit/routes/login-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | login', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:login');\n      assert.ok(route);\n    });\n  });\n});","define(\"super-rentals/tests/unit/routes/rentals-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | rentals', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:rentals');\n      assert.ok(route);\n    });\n  });\n});","define(\"super-rentals/tests/unit/routes/rentals/index-test\", [\"qunit\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\"], function (_qunit, _emberQunit, _setupMirage) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | rentals/index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    (0, _qunit.test)('should load all rentals', function (assert) {\n      let route = this.owner.lookup('route:rentals/index');\n      return Ember.run(() => {\n        return route.model().then(results => {\n          assert.equal(results.get('length'), 3);\n        });\n      });\n    });\n  });\n});","define(\"super-rentals/tests/unit/routes/rentals/show-test\", [\"qunit\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\"], function (_qunit, _emberQunit, _setupMirage) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | rentals/show', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    (0, _qunit.test)('should load rental by id', function (assert) {\n      let route = this.owner.lookup('route:rentals/show');\n      return Ember.run(() => {\n        return route.model({\n          rental_id: 'grand-old-mansion'\n        }).then(result => {\n          assert.equal(result.get('title'), \"Grand Old Mansion\");\n        });\n      });\n    });\n  });\n});","define(\"super-rentals/tests/unit/routes/token-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | token', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:token');\n      assert.ok(route);\n    });\n  });\n});","define(\"super-rentals/tests/unit/services/map-element-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  const DUMMY_ELEMENT = {};\n  (0, _qunit.module)('Unit | Service | maps', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('should create a new map if one isnt cached for location', async function (assert) {\n      assert.expect(5);\n      let stubMapService = {\n        createMap(element, coords) {\n          assert.ok(element, 'createMap called with element');\n          assert.deepEqual(coords, [0, 0], 'createMap given coordinates');\n          return DUMMY_ELEMENT;\n        }\n\n      };\n      let stubGeocodeService = {\n        fetchCoordinates(location) {\n          assert.equal(location, 'San Francisco', 'fetchCoordinates called with location');\n          return Ember.RSVP.resolve([0, 0]);\n        }\n\n      };\n      let mapService = this.owner.factoryFor('service:map-element').create({\n        map: stubMapService,\n        geocode: stubGeocodeService\n      });\n      let element = await mapService.getMapElement('San Francisco');\n      assert.ok(element, 'element exists');\n      assert.equal(element.className, 'map', 'element has class name of map');\n    });\n    (0, _qunit.test)('should use existing map if one is cached for location', async function (assert) {\n      assert.expect(1);\n      let stubCachedMaps = {\n        sanFrancisco: DUMMY_ELEMENT\n      };\n      let mapService = this.owner.factoryFor('service:map-element').create({\n        cachedMaps: stubCachedMaps\n      });\n      let element = await mapService.getMapElement('San Francisco');\n      assert.deepEqual(element, DUMMY_ELEMENT, 'element fetched from cache');\n    });\n  });\n});","define('super-rentals/config/environment', [], function() {\n  var prefix = 'super-rentals';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('super-rentals/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}